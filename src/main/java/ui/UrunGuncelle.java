/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import dao.UrunDAO;
import dao.UrunGuncelleDAO;
import dao.UrunTabloDAO;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Urun;

/**
 *
 * @author susa
 */
public class UrunGuncelle extends javax.swing.JFrame {

    private JComboBox kategoriComboBox;
    private JComboBox altKategoriComboBox;
    private JComboBox markaComboBox;
    private JComboBox bedenComboBox;
    private UrunGuncelleDAO urunGuncelleDAO = new UrunGuncelleDAO();

    /**
     * Creates new form UrunGuncelle
     */
    public UrunGuncelle() {
        initComponents();
        setSize(1400, 800);  // Form boyutunu artırıyorum
        setLocationRelativeTo(null);  // Formu ekranın ortasına konumlandırıyorum
        urunGuncelleDAO = new UrunGuncelleDAO();
        
        // Durum combo box'ını başlangıçta bir kez doldur
        /*
        comboYeniDurum.removeAllItems();
        comboYeniDurum.addItem("active");
        comboYeniDurum.addItem("inactive");
        
        
        */
        tabloyuDoldur();
        
        // Kategori verilerini yükle
        //kategoriVerileriniYukle();
        
        tfAra.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String aramaMetni = tfAra.getText().trim();
                urunAra(aramaMetni);
            }
        });
        
        setupInputValidation();
        
        // Kategori değişikliğini dinle
        comboYeniKategori.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    String secilenKategori = (String) comboYeniKategori.getSelectedItem();
                    if (secilenKategori != null && !secilenKategori.isEmpty()) {
                        urunGuncelleDAO.kategoriDegistiginde(
                            secilenKategori,
                            ComboYeniAltKategori,
                            comboYeniMarka,
                            comboYeniBeden,
                            comboYeniRenk
                        );
                    }
                }
            }
        });
        
        // Alt Kategori değişikliğini dinle
        ComboYeniAltKategori.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    String secilenKategori = (String) comboYeniKategori.getSelectedItem();
                    String secilenAltKategori = (String) ComboYeniAltKategori.getSelectedItem();
                    if (secilenKategori != null && !secilenKategori.isEmpty() &&
                        secilenAltKategori != null && !secilenAltKategori.isEmpty()) {
                        urunGuncelleDAO.altKategoriDegistiginde(
                            secilenKategori,
                            secilenAltKategori,
                            comboYeniMarka,
                            comboYeniBeden
                        );
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tfAd = new javax.swing.JTextField();
        tfYeniAd = new javax.swing.JTextField();
        tfBarkod = new javax.swing.JTextField();
        tfSatisFiyati = new javax.swing.JTextField();
        tfYeniSatisFiyati = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfMevtucStok = new javax.swing.JTextField();
        tfYeniMevcutStok = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        btnGuncelle = new javax.swing.JButton();
        tfAra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfKategori = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfAltKategori = new javax.swing.JTextField();
        tfRenk = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        comboYeniKategori = new javax.swing.JComboBox<>();
        ComboYeniAltKategori = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        comboYeniRenk = new javax.swing.JComboBox<>();
        tfMarka = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        comboYeniMarka = new javax.swing.JComboBox<>();
        tfBeden = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        comboYeniBeden = new javax.swing.JComboBox<>();
        tfMaliyet = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        tfYeniMaliyet = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        tfReorderLevel = new javax.swing.JTextField();
        tfYeniReorderLevel = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        comboYeniDurum = new javax.swing.JComboBox<>();
        tfDurum = new javax.swing.JTextField();
        tfYeniBarkod = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Barkod", "Ad", "Kategori", "Alt kategori", "Renk", "Marka", "Beden", "Maliyet", "Satış Fiyatı", "Stok", "Reorder Level", "Durum"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 290, 1350, 450);

        tfAd.setEditable(false);
        getContentPane().add(tfAd);
        tfAd.setBounds(190, 100, 150, 23);
        getContentPane().add(tfYeniAd);
        tfYeniAd.setBounds(190, 130, 150, 23);

        tfBarkod.setEditable(false);
        getContentPane().add(tfBarkod);
        tfBarkod.setBounds(190, 40, 150, 23);

        tfSatisFiyati.setEditable(false);
        getContentPane().add(tfSatisFiyati);
        tfSatisFiyati.setBounds(830, 160, 152, 23);
        getContentPane().add(tfYeniSatisFiyati);
        tfYeniSatisFiyati.setBounds(830, 190, 152, 23);

        jLabel1.setText("Adı");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 100, 150, 20);

        jLabel2.setText("Yeni Barkod");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 70, 150, 20);

        jLabel3.setText("Mevcut Stok");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(1000, 40, 150, 20);

        jLabel4.setText("Eklenecek Stok Miktarı");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(1000, 70, 150, 20);

        jLabel5.setText("Yeni Satış Fiyatı");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(670, 190, 150, 20);

        jLabel6.setText("Mevcut Satış Fiyatı");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(670, 160, 150, 20);

        jLabel7.setText("Yeni Adı");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(20, 130, 150, 20);

        tfMevtucStok.setEditable(false);
        tfMevtucStok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfMevtucStokActionPerformed(evt);
            }
        });
        getContentPane().add(tfMevtucStok);
        tfMevtucStok.setBounds(1170, 40, 152, 23);
        getContentPane().add(tfYeniMevcutStok);
        tfYeniMevcutStok.setBounds(1170, 70, 152, 23);

        jButton10.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        jButton10.setText("<");
        jButton10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton10);
        jButton10.setBounds(0, 0, 32, 34);

        btnGuncelle.setText("Güncelle");
        btnGuncelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuncelleActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuncelle);
        btnGuncelle.setBounds(20, 250, 320, 23);
        getContentPane().add(tfAra);
        tfAra.setBounds(990, 250, 340, 23);

        jLabel8.setText("Durum");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(1000, 170, 148, 23);

        jLabel9.setText("Kategori");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(20, 160, 150, 20);

        tfKategori.setEditable(false);
        tfKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfKategoriActionPerformed(evt);
            }
        });
        getContentPane().add(tfKategori);
        tfKategori.setBounds(190, 160, 152, 23);

        jLabel10.setText("Yeni Kategori");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(20, 190, 150, 20);

        jLabel11.setText("Alt Kategori");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(350, 40, 130, 20);

        tfAltKategori.setEditable(false);
        getContentPane().add(tfAltKategori);
        tfAltKategori.setBounds(500, 40, 152, 23);

        tfRenk.setEditable(false);
        getContentPane().add(tfRenk);
        tfRenk.setBounds(500, 100, 152, 23);

        jLabel12.setText("Renk");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(350, 100, 130, 20);

        comboYeniKategori.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboYeniKategoriİtemStateChanged(evt);
            }
        });
        comboYeniKategori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboYeniKategoriActionPerformed(evt);
            }
        });
        getContentPane().add(comboYeniKategori);
        comboYeniKategori.setBounds(190, 190, 154, 23);

        getContentPane().add(ComboYeniAltKategori);
        ComboYeniAltKategori.setBounds(500, 70, 152, 23);

        jLabel13.setText("Yeni Alt Kategori");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(350, 70, 130, 20);

        jLabel14.setText("Yeni Renk");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(350, 130, 130, 20);

        getContentPane().add(comboYeniRenk);
        comboYeniRenk.setBounds(500, 130, 150, 23);

        tfMarka.setEditable(false);
        getContentPane().add(tfMarka);
        tfMarka.setBounds(500, 160, 150, 23);

        jLabel15.setText("Marka");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(350, 160, 130, 20);

        jLabel16.setText("Yeni Marka");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(350, 190, 130, 20);

        getContentPane().add(comboYeniMarka);
        comboYeniMarka.setBounds(500, 190, 154, 23);

        tfBeden.setEditable(false);
        getContentPane().add(tfBeden);
        tfBeden.setBounds(830, 40, 152, 23);

        jLabel17.setText("Beden");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(670, 40, 150, 20);

        jLabel18.setText("Yeni Beden");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(670, 70, 150, 20);

        getContentPane().add(comboYeniBeden);
        comboYeniBeden.setBounds(830, 70, 154, 23);

        tfMaliyet.setEditable(false);
        getContentPane().add(tfMaliyet);
        tfMaliyet.setBounds(830, 100, 152, 23);

        jLabel20.setText("Maliyet");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(670, 100, 150, 20);

        tfYeniMaliyet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfYeniMaliyetActionPerformed(evt);
            }
        });
        getContentPane().add(tfYeniMaliyet);
        tfYeniMaliyet.setBounds(830, 130, 152, 23);

        jLabel21.setText("Yeni Maliyet");
        getContentPane().add(jLabel21);
        jLabel21.setBounds(670, 130, 150, 20);

        jLabel19.setText("Reorder level");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(1000, 100, 150, 20);

        jLabel22.setText("Yeni Reorder level");
        getContentPane().add(jLabel22);
        jLabel22.setBounds(1000, 130, 150, 20);

        tfReorderLevel.setEditable(false);
        tfReorderLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfReorderLevelActionPerformed(evt);
            }
        });
        getContentPane().add(tfReorderLevel);
        tfReorderLevel.setBounds(1170, 100, 152, 23);
        getContentPane().add(tfYeniReorderLevel);
        tfYeniReorderLevel.setBounds(1170, 130, 152, 23);

        jLabel23.setText("Yeni Durum");
        getContentPane().add(jLabel23);
        jLabel23.setBounds(1000, 190, 152, 26);

        getContentPane().add(comboYeniDurum);
        comboYeniDurum.setBounds(1170, 190, 152, 23);

        tfDurum.setEditable(false);
        getContentPane().add(tfDurum);
        tfDurum.setBounds(1170, 160, 154, 23);
        getContentPane().add(tfYeniBarkod);
        tfYeniBarkod.setBounds(188, 70, 150, 23);

        jLabel24.setText("Barkod");
        getContentPane().add(jLabel24);
        jLabel24.setBounds(20, 40, 150, 20);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        this.setVisible(false);
        Anasayfa anasayfa = new Anasayfa();
        anasayfa.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void tfMevtucStokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfMevtucStokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfMevtucStokActionPerformed

    private void tfYeniMaliyetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfYeniMaliyetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfYeniMaliyetActionPerformed

    private void tfReorderLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfReorderLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfReorderLevelActionPerformed

    private void tfKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfKategoriActionPerformed

    private void comboYeniKategoriİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboYeniKategoriİtemStateChanged
        
     
        if (evt.getStateChange() == ItemEvent.SELECTED) {
        try {
            // Seçilen kategoriyi al
            String secilenKategori = (String) comboYeniKategori.getSelectedItem();
            
            // DAO nesnesini oluştur
            UrunGuncelleDAO dao = new UrunGuncelleDAO();
            
            // Tüm gerekli parametreleri gönder
            dao.kategoriDegistiginde(
                secilenKategori,                    // String kategori adı
                ComboYeniAltKategori,              // Alt kategori combobox
                comboYeniMarka,                     // Marka combobox
                comboYeniBeden,                     // Beden combobox
                comboYeniRenk                       // Renk combobox
            );
                
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, 
                "Veriler yüklenirken hata oluştu: " + e.getMessage(), 
                "Hata", 
                JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_comboYeniKategoriİtemStateChanged

    private void comboYeniKategoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboYeniKategoriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboYeniKategoriActionPerformed

    private void btnGuncelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuncelleActionPerformed
        try {
            // Form validasyonu
            if (!validateForm()) {
                return;
            }

            // Değerleri al
            String eskiBarkod = tfBarkod.getText().trim();
            String yeniBarkod = tfYeniBarkod.getText().trim();
            String yeniAd = tfYeniAd.getText().trim();
            String yeniKategori = (String) comboYeniKategori.getSelectedItem();
            String yeniAltKategori = (String) ComboYeniAltKategori.getSelectedItem();
            String yeniRenk = (String) comboYeniRenk.getSelectedItem();
            String yeniBeden = (String) comboYeniBeden.getSelectedItem();
            String yeniMarka = (String) comboYeniMarka.getSelectedItem();
            String yeniDurum = (String) comboYeniDurum.getSelectedItem();

            // Sayısal değerleri parse et
            double yeniSatisFiyati = parsePrice(tfYeniSatisFiyati.getText().trim());
            double yeniMaliyet = parsePrice(tfYeniMaliyet.getText().trim());
            int eklenecekStok = Integer.parseInt(tfYeniMevcutStok.getText().trim());
            int yeniReorderLevel = Integer.parseInt(tfYeniReorderLevel.getText().trim());

            // Validasyonlar

            // Barkod formatı kontrolü
            if (!yeniBarkod.matches("\\d+") || yeniBarkod.length() > 16) {
                JOptionPane.showMessageDialog(this, 
                    "Barkod sadece rakam içermeli ve 16 karakterden uzun olmamalı!", 
                    "Hata", 
                    JOptionPane.ERROR_MESSAGE);
                return;
            }

            
            String productId = urunGuncelleDAO.getProductIdByBarcode(eskiBarkod);
            
            
            // Güncelleme işlemini gerçekleştir
            boolean sonuc = urunGuncelleDAO.urunGuncelle(
                productId, // product_id olarak kullanıyoruz
                yeniAd, 
                yeniKategori, 
                yeniAltKategori,
                yeniRenk, 
                yeniBeden, 
                yeniMarka, 
                yeniSatisFiyati, 
                yeniMaliyet,
                eklenecekStok, // Eklenecek stok miktarı
                yeniReorderLevel, 
                yeniDurum,
                yeniBarkod
            );

            if (sonuc) {
                JOptionPane.showMessageDialog(this, "Ürün başarıyla güncellendi!");
                tabloyuDoldur();
                temizle();
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Ürün güncellenirken bir hata oluştu!", 
                    "Hata", 
                    JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, 
                "Lütfen sayısal değerleri doğru formatta giriniz!", 
                "Hata", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Beklenmeyen bir hata oluştu: " + e.getMessage(), 
                "Hata", 
                JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGuncelleActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        int selectedRow = jTable1.getSelectedRow();



        System.out.println("");        
        kategoriVerileriniYukle();
        if (selectedRow == -1) return;
        
        // Seçili satırdan değerleri al
        Object barcodeObj = jTable1.getValueAt(selectedRow, 0);
        Object productNameObj = jTable1.getValueAt(selectedRow, 1);
        Object categoryNameObj = jTable1.getValueAt(selectedRow, 2);
        Object subCategoryNameObj = jTable1.getValueAt(selectedRow, 3);
        Object colorNameObj = jTable1.getValueAt(selectedRow, 4);
        Object brandNameObj = jTable1.getValueAt(selectedRow, 5);
        Object sizeNameObj = jTable1.getValueAt(selectedRow, 6);
        Object costObj = jTable1.getValueAt(selectedRow, 7);
        Object priceObj = jTable1.getValueAt(selectedRow, 8);
        Object stockObj = jTable1.getValueAt(selectedRow, 9);
        Object reorderObj = jTable1.getValueAt(selectedRow, 10);
        Object statusObj = jTable1.getValueAt(selectedRow, 11);
        
        
        // Text field'lara değerleri güvenli bir şekilde aktar
        tfBarkod.setText(barcodeObj != null ? barcodeObj.toString() : "");
        tfYeniAd.setText(productNameObj != null ? productNameObj.toString() : "");
        tfAd.setText(productNameObj != null ? productNameObj.toString() : "");
        tfKategori.setText(categoryNameObj != null ? categoryNameObj.toString() : "");
        tfAltKategori.setText(subCategoryNameObj != null ? subCategoryNameObj.toString() : "");
        tfRenk.setText(colorNameObj != null ? colorNameObj.toString() : "");
        tfMarka.setText(brandNameObj != null ? brandNameObj.toString() : "");
        tfBeden.setText(sizeNameObj != null ? sizeNameObj.toString() : "");
        
        
        // Stok değerlerini tam sayı olarak göster
        if (stockObj != null) {
            int stockValue = 0;
            if (stockObj instanceof Integer) {
                stockValue = (Integer) stockObj;
            } else if (stockObj instanceof Double) {
                stockValue = (int) Math.round((Double) stockObj);
            } else {
                try {
                    stockValue = (int) Math.round(Double.parseDouble(stockObj.toString()));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
            tfMevtucStok.setText(String.valueOf(stockValue));
            tfYeniMevcutStok.setText("0"); // Yeni stok değerini 0 olarak başlat
        }
        
        // Reorder level değerini tam sayı olarak göster
        if (reorderObj != null) {
            int reorderValue = 0;
            if (reorderObj instanceof Integer) {
                reorderValue = (Integer) reorderObj;
            } else if (reorderObj instanceof Double) {
                reorderValue = (int) Math.round((Double) reorderObj);
            } else {
                try {
                    reorderValue = (int) Math.round(Double.parseDouble(reorderObj.toString()));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
            tfReorderLevel.setText(String.valueOf(reorderValue));
            tfYeniReorderLevel.setText(String.valueOf(reorderValue));
        }
        
        // Fiyat ve maliyet değerlerini aktar
        tfMaliyet.setText(costObj != null ? costObj.toString() : "");
        tfYeniMaliyet.setText(costObj != null ? costObj.toString() : "");
        tfSatisFiyati.setText(priceObj != null ? priceObj.toString() : "");
        tfYeniSatisFiyati.setText(priceObj != null ? priceObj.toString() : "");
        tfDurum.setText(statusObj != null ? statusObj.toString() : "");
        tfYeniBarkod.setText(barcodeObj != null ? barcodeObj.toString() : "");
        
        
        // ComboBox'ları varsayılan seçeneklerle doldur
        comboYeniKategori.setSelectedItem(categoryNameObj);
        ComboYeniAltKategori.setSelectedItem(subCategoryNameObj);
        
        // Renk ve beden için özel kontrol
        String colorName = colorNameObj != null ? colorNameObj.toString() : "";
        String sizeName = sizeNameObj != null ? sizeNameObj.toString() : "";
        
        // Eğer renk boş veya null ise "Standart" seç
        if (colorName == null || colorName.trim().isEmpty()) {
            comboYeniRenk.setSelectedItem("Standart");
        } else {
            comboYeniRenk.setSelectedItem(colorName);
        }
        
        // Eğer beden boş veya null ise "Standart" seç
        if (sizeName == null || sizeName.trim().isEmpty()) {
            comboYeniBeden.setSelectedItem("Standart");
        } else {
            comboYeniBeden.setSelectedItem(sizeName);
        }
        
        comboYeniMarka.setSelectedItem(brandNameObj);
        
        // Durum seçimini güncelle
        if (statusObj != null) {
            String status = statusObj.toString();
            // Eğer mevcut durum "Active" veya "Inactive" değilse, varsayılan olarak "Active" seç
            if (!status.equals("active") && !status.equals("inactive")) {
                status = "active";
            }
            // Önce combo box'ı temizle ve sadece iki seçeneği ekle
            comboYeniDurum.removeAllItems();
            comboYeniDurum.addItem("active");
            comboYeniDurum.addItem("inactive");
            // Sonra doğru değeri seç
            comboYeniDurum.setSelectedItem(status);
        }
        
        urunGuncelleDAO.tablodanSecimYapildiginda(comboYeniBeden, comboYeniRenk);
    }

    private void tabloyuDoldur(){
        UrunTabloDAO urunTabloDAO = new UrunTabloDAO();
        urunTabloDAO.tabloGuncelleGetir(jTable1);
    }

    private void urunAra(String aramaMetni) {
        UrunTabloDAO urunTabloDAO = new UrunTabloDAO();
        urunTabloDAO.urunAramaYap(jTable1, aramaMetni);
    }

    private boolean validateForm() {
        try {
            
            
            // Barkod kontrolü
            String barkod = tfBarkod.getText().trim();
            
            if (barkod.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Barkod boş olamaz!");
                tfBarkod.requestFocus();
                return false;
            }
             
           
            
            // Yeni ad kontrolü
            String yeniAd = tfYeniAd.getText().trim();
            
            if (yeniAd.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Yeni ürün adı boş olamaz!");
                tfYeniAd.requestFocus();
                return false;
            }
            // ComboBox kontrolleri
            if (comboYeniKategori.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen kategori seçiniz!");
                return false;
            }
            if (ComboYeniAltKategori.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen alt kategori seçiniz!");
                return false;
            }
            if (comboYeniRenk.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen renk seçiniz!");
                return false;
            }
            

            if (comboYeniBeden.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen beden seçiniz!");
                return false;
            }
            

            if (comboYeniMarka.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen marka seçiniz!");
                return false;
            }
            

            if (comboYeniDurum.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(this, "Lütfen durum seçiniz!");
                return false;
            }
            

            // Sayısal alan kontrolleri
            try {
                // Satış fiyatı kontrolü
                String satisFiyatiStr = tfYeniSatisFiyati.getText().trim();
                
                double satisFiyati = parsePrice(satisFiyatiStr);
                
                if (satisFiyati <= 0) {
                    JOptionPane.showMessageDialog(this, "Satış fiyatı 0'dan büyük olmalıdır!");
                    tfYeniSatisFiyati.requestFocus();
                    return false;
                }

                // Maliyet kontrolü
                String maliyetStr = tfYeniMaliyet.getText().trim();
                
                double maliyet = parsePrice(maliyetStr);
                
                if (maliyet <= 0) {
                    JOptionPane.showMessageDialog(this, "Maliyet 0'dan büyük olmalıdır!");
                    tfYeniMaliyet.requestFocus();
                    return false;
                }

                if (maliyet >= satisFiyati) {
                    JOptionPane.showMessageDialog(this, "Maliyet satış fiyatından büyük veya eşit olamaz!");
                    tfYeniMaliyet.requestFocus();
                    return false;
                }

                // Stok kontrolü
                String stokStr = tfYeniMevcutStok.getText().trim();
                
                int stok = Integer.parseInt(stokStr);
                

                // Reorder level kontrolü
                String reorderStr = tfYeniReorderLevel.getText().trim();
                
                int reorderLevel = Integer.parseInt(reorderStr);
                
                if (reorderLevel < 0) {
                    JOptionPane.showMessageDialog(this, "Yeniden sipariş seviyesi negatif olamaz!");
                    tfYeniReorderLevel.requestFocus();
                    return false;
                }

            } catch (NumberFormatException e) {
                
                JOptionPane.showMessageDialog(this, "Lütfen sayısal değerleri doğru formatta giriniz!");
                return false;
            }

            
            return true;

        } catch (Exception e) {
            
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Form validasyonunda hata: " + e.getMessage());
            return false;
        }
    }

    private void setupInputValidation() {
        tfYeniSatisFiyati.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
                // Nokta kontrolü - birden fazla nokta olmamalı
                if (c == '.' && tfYeniSatisFiyati.getText().contains(".")) {
                    e.consume();
                }
            }
        });
        
        tfYeniMevcutStok.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                // Rakam ve eksi işaretine izin ver
                if (!Character.isDigit(c) && c != '-' && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
                // Eksi işareti sadece en başta olabilir
                if (c == '-' && tfYeniMevcutStok.getCaretPosition() != 0) {
                    e.consume();
                }
                // Birden fazla eksi işareti olamaz
                if (c == '-' && tfYeniMevcutStok.getText().contains("-")) {
                    e.consume();
                }
            }
        });
        
        tfYeniReorderLevel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });
        
        tfYeniMaliyet.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c) && c != '.' && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
                // Nokta kontrolü - birden fazla nokta olmamalı
                if (c == '.' && tfYeniMaliyet.getText().contains(".")) {
                    e.consume();
                }
            }
        });
        
        tfBarkod.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                // Sadece rakam ve backspace'e izin ver
                if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
                // Maksimum 16 karakter
                if (tfBarkod.getText().length() >= 16 && c != KeyEvent.VK_BACK_SPACE) {
                    e.consume();
                }
            }
        });
    }

    private double parsePrice(String price) {
        if (price == null || price.trim().isEmpty()) {
            return 0.0;
        }
        try {
            // Virgülü noktaya çevir
            price = price.replace(",", ".");
            return Double.parseDouble(price);
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }

    private void temizle() {
        tfBarkod.setText("");
        tfAd.setText("");
        tfMaliyet.setText("");
        tfSatisFiyati.setText("");
        tfMevtucStok.setText("");
        tfYeniMevcutStok.setText("");
        tfReorderLevel.setText("");
        tfYeniReorderLevel.setText("");
        tfKategori.setText("");
        tfAltKategori.setText("");
        tfDurum.setText("");
        tfMarka.setText("");
        tfBeden.setText("");
        tfRenk.setText("");
        tfYeniAd.setText("");
        tfYeniMaliyet.setText("");
        tfYeniSatisFiyati.setText("");
        tfYeniBarkod.setText("");
        
        comboYeniKategori.removeAllItems();
        ComboYeniAltKategori.removeAllItems();
        comboYeniRenk.removeAllItems();
        comboYeniBeden.removeAllItems();
        comboYeniMarka.removeAllItems();
        comboYeniDurum.removeAllItems();
        
        
        // ComboBox'ları yeniden yükle
        //kategoriVerileriniYukle();
    }

    private void kategoriVerileriniYukle() {
        try {
            
            
            // ComboBox'ları temizle
            comboYeniKategori.removeAllItems();
            ComboYeniAltKategori.removeAllItems();
            comboYeniRenk.removeAllItems();
            comboYeniBeden.removeAllItems();
            comboYeniMarka.removeAllItems();
            
            // Verileri yükle
            UrunGuncelleDAO dao = new UrunGuncelleDAO();
            dao.kategoriVerileriniYukle(
                comboYeniKategori, 
                ComboYeniAltKategori, 
                comboYeniRenk, 
                comboYeniBeden, 
                comboYeniMarka, 
                comboYeniDurum
            );
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "Kategori verileri yüklenirken hata oluştu: " + e.getMessage(),
                "Hata",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboYeniAltKategori;
    private javax.swing.JButton btnGuncelle;
    private javax.swing.JComboBox<String> comboYeniBeden;
    private javax.swing.JComboBox<String> comboYeniDurum;
    private javax.swing.JComboBox<String> comboYeniKategori;
    private javax.swing.JComboBox<String> comboYeniMarka;
    private javax.swing.JComboBox<String> comboYeniRenk;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfAd;
    private javax.swing.JTextField tfAltKategori;
    private javax.swing.JTextField tfAra;
    private javax.swing.JTextField tfBarkod;
    private javax.swing.JTextField tfBeden;
    private javax.swing.JTextField tfDurum;
    private javax.swing.JTextField tfKategori;
    private javax.swing.JTextField tfMaliyet;
    private javax.swing.JTextField tfMarka;
    private javax.swing.JTextField tfMevtucStok;
    private javax.swing.JTextField tfReorderLevel;
    private javax.swing.JTextField tfRenk;
    private javax.swing.JTextField tfSatisFiyati;
    private javax.swing.JTextField tfYeniAd;
    private javax.swing.JTextField tfYeniBarkod;
    private javax.swing.JTextField tfYeniMaliyet;
    private javax.swing.JTextField tfYeniMevcutStok;
    private javax.swing.JTextField tfYeniReorderLevel;
    private javax.swing.JTextField tfYeniSatisFiyati;
    // End of variables declaration//GEN-END:variables
}
