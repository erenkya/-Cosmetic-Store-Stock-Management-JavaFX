package ui.islemler;

import dao.UrunDAO;
import dao.KategoriDAO;
import dao.RenkDAO;
import dao.BedenDAO;
import dao.MarkaDAO;
import dao.SubKategoriDAO;
import dao.UrunTabloDAO;
import dao.MyConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JTable;
import util.BarkodGenerator;

/**
 *
 * @author susa
 */
public class UrunGiris extends JPanel {
    private JTable urunTablosu;
    

    /**
     * Creates new form KiyafetGiris
     */
    public UrunGiris(JTable urunTablosu) {
    this.urunTablosu = urunTablosu;
    initComponents();
    comboBoxlariDoldur();

    // Barkod alanını düzenlenebilir yap
    barcodTf.setEditable(true);

    // Barkod alanına FocusListener ekle
    barcodTf.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusLost(java.awt.event.FocusEvent evt) {
            String barkod = barcodTf.getText().trim();
            if (!barkod.isEmpty()) {
                try {
                    Connection conn = MyConnection.connection();
                    String sql = "SELECT COUNT(*) FROM Products WHERE barcode = ?";
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ps.setString(1, barkod);
                    ResultSet rs = ps.executeQuery();

                    if (rs.next() && rs.getInt(1) > 0) {
                        barcodTf.setBackground(new java.awt.Color(255, 200, 200)); // Açık kırmızı
                        JOptionPane.showMessageDialog(null, 
                            "Bu barkod zaten kullanımda! Lütfen başka bir barkod giriniz.", 
                            "Uyarı", 
                            JOptionPane.WARNING_MESSAGE);
                        barcodTf.requestFocus(); // Kullanıcıyı barkod alanına geri getir
                    } else {
                        barcodTf.setBackground(java.awt.Color.WHITE);
                    }

                    rs.close();
                    ps.close();
                    conn.close();

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                barcodTf.setBackground(java.awt.Color.WHITE);
            }
        }
    });

    // Kategori seçimi değiştiğinde
    kategoriCombo.addItemListener(new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String secilenKategori = (String) kategoriCombo.getSelectedItem();
                if (!"Seçiniz".equals(secilenKategori)) {
                    // Seçilen kategoriye göre alt kategorileri ve markaları güncelle
                    KategoriDAO kategoriDAO = new KategoriDAO();
                    int kategoriId = kategoriDAO.getKategoriId(secilenKategori);

                    SubKategoriDAO subKategoriDAO = new SubKategoriDAO();
                    List<String> altKategoriler = subKategoriDAO.subKategorileriGetirByKategori(kategoriId);
                    altKategoriCombo.removeAllItems();
                    altKategoriCombo.addItem("Seçiniz");
                    for (String altKategori : altKategoriler) {
                        altKategoriCombo.addItem(altKategori);
                    }

                    // Markaları güncelle
                    MarkaDAO markaDAO = new MarkaDAO();
                    List<String> markalar = markaDAO.markalariGetirByKategori(kategoriId);
                    markaCombo.removeAllItems();
                    markaCombo.addItem("Seçiniz");
                    for (String marka : markalar) {
                        markaCombo.addItem(marka);
                    }
                }
            }
        }
    });
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        urunAdiTf = new javax.swing.JTextField();
        barcodTf = new javax.swing.JTextField();
        kategoriCombo = new javax.swing.JComboBox<>();
        renkCombo = new javax.swing.JComboBox<>();
        bedenCombo = new javax.swing.JComboBox<>();
        satisTf = new javax.swing.JTextField();
        stokTf = new javax.swing.JTextField();
        reorderTf = new javax.swing.JTextField();
        btnEkle = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        markaCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        altKategoriCombo = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        maliyetTF = new javax.swing.JTextField();

        jPanel1.setLayout(null);

        jLabel2.setText("Kategori");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 130, 110, 30);

        jLabel3.setText("Adı");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 50, 110, 20);

        jLabel4.setText("Barkod");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 90, 110, 30);

        jLabel5.setText("Reorder Level");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(20, 450, 110, 30);

        jLabel6.setText("Renk");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(20, 210, 110, 30);

        jLabel7.setText("Beden");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(20, 250, 110, 30);

        jLabel8.setText("Satış Fiyatı");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(20, 370, 110, 30);

        jLabel9.setText("Mevcut Stok");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(20, 410, 110, 30);
        jPanel1.add(urunAdiTf);
        urunAdiTf.setBounds(170, 50, 160, 30);
        jPanel1.add(barcodTf);
        barcodTf.setBounds(170, 90, 160, 30);

        kategoriCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(kategoriCombo);
        kategoriCombo.setBounds(170, 130, 160, 30);

        renkCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(renkCombo);
        renkCombo.setBounds(170, 210, 160, 30);

        bedenCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(bedenCombo);
        bedenCombo.setBounds(170, 250, 160, 30);

        satisTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                satisTfKeyTyped(evt);
            }
        });
        jPanel1.add(satisTf);
        satisTf.setBounds(170, 370, 160, 30);

        stokTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                stokTfKeyTyped(evt);
            }
        });
        jPanel1.add(stokTf);
        stokTf.setBounds(170, 410, 160, 30);

        reorderTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                reorderTfKeyTyped(evt);
            }
        });
        jPanel1.add(reorderTf);
        reorderTf.setBounds(170, 450, 160, 30);

        btnEkle.setText("Ekle");
        btnEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEkleActionPerformed(evt);
            }
        });
        jPanel1.add(btnEkle);
        btnEkle.setBounds(170, 490, 160, 23);

        jLabel10.setText("Marka");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(20, 290, 110, 30);

        markaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(markaCombo);
        markaCombo.setBounds(170, 290, 160, 30);

        jLabel1.setText("Alt Kategori");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 180, 90, 17);

        altKategoriCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(altKategoriCombo);
        altKategoriCombo.setBounds(170, 170, 160, 30);

        jLabel11.setText("Maliyet");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(20, 330, 130, 30);
        jPanel1.add(maliyetTF);
        maliyetTF.setBounds(170, 330, 160, 30);
        maliyetTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maliyetTfKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEkleActionPerformed(java.awt.event.ActionEvent evt) {
        if(urunAdiTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ürün adı boş olamaz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if(barcodTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Barkod boş olamaz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String kategori = kategoriCombo.getSelectedItem().toString();
        String altKategori = altKategoriCombo.getSelectedItem().toString();
        String renk = renkCombo.getSelectedItem().toString();
        String beden = bedenCombo.getSelectedItem().toString();
        String marka = markaCombo.getSelectedItem().toString();

        if("Seçiniz".equals(kategori)) {
            JOptionPane.showMessageDialog(this, "Kategori seçiniz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if("Seçiniz".equals(altKategori)) {
            JOptionPane.showMessageDialog(this, "Alt kategori seçiniz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if("Seçiniz".equals(renk)) {
            JOptionPane.showMessageDialog(this, "Renk seçiniz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if("Seçiniz".equals(beden)) {
            JOptionPane.showMessageDialog(this, "Beden seçiniz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if("Seçiniz".equals(marka)) {
            JOptionPane.showMessageDialog(this, "Marka seçiniz!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            double satisFiyati = Double.parseDouble(satisTf.getText().trim().replace(",", "."));
            double maliyet = Double.parseDouble(maliyetTF.getText().trim().replace(",", "."));
            int stok = Integer.parseInt(stokTf.getText().trim());
            int reorderLevel = Integer.parseInt(reorderTf.getText().trim());

            if(satisFiyati <= 0) {
                JOptionPane.showMessageDialog(this, "Satış fiyatı 0'dan büyük olmalıdır!", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(maliyet <= 0) {
                JOptionPane.showMessageDialog(this, "Maliyet 0'dan büyük olmalıdır!", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(maliyet >= satisFiyati) {
                JOptionPane.showMessageDialog(this, "Maliyet satış fiyatından büyük veya eşit olamaz!", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if(stok < 0) {
                JOptionPane.showMessageDialog(this, "Stok negatif olamaz!", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Ürün tipini kategoriye göre belirle
            String urunTipi = kategori.toUpperCase();

            // Veritabanına kaydet
            UrunDAO urunDao = new UrunDAO();
            boolean basarili = urunDao.urunEkle(
                urunAdiTf.getText().trim(),
                barcodTf.getText().trim(),
                kategori,
                altKategori,
                renk,
                beden,
                marka,
                satisFiyati,
                maliyet,
                stok,
                reorderLevel,
                urunTipi
            );
            
            if(basarili) {
                // Tabloyu güncelle
                UrunTabloDAO urunTabloDAO = new UrunTabloDAO();
                urunTabloDAO.tableDoldur(urunTablosu);
                
                JOptionPane.showMessageDialog(this, "Ürün başarıyla eklendi.", "Başarılı", JOptionPane.INFORMATION_MESSAGE);
                formTemizle();
            } else {
                JOptionPane.showMessageDialog(this, "Ürün eklenirken bir hata oluştu!", "Hata", JOptionPane.ERROR_MESSAGE);
            }

        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Fiyat, stok ve reorder level sayısal değer olmalıdır!", "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void stokTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stokTfKeyTyped
        rakamYaz(evt);
    }//GEN-LAST:event_stokTfKeyTyped

    private void satisTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_satisTfKeyTyped
        char c = evt.getKeyChar();
        // Eğer basılan tuş rakam veya nokta değilse, olay engellenir
        if (!Character.isDigit(c) && c != '.' && c != ',') {
            evt.consume();  // Bu tuşu engelle
        }
        // Eğer nokta veya virgül varsa ve tekrar nokta veya virgül girilmeye çalışılıyorsa engelle
        if ((c == '.' || c == ',') && (satisTf.getText().contains(".") || satisTf.getText().contains(","))) {
            evt.consume();
        }
    }//GEN-LAST:event_satisTfKeyTyped

    private void reorderTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reorderTfKeyTyped

        rakamYaz(evt);
    }//GEN-LAST:event_reorderTfKeyTyped

    private void maliyetTfKeyTyped(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        // Eğer basılan tuş rakam veya nokta değilse, olay engellenir
        if (!Character.isDigit(c) && c != '.' && c != ',') {
            evt.consume();  // Bu tuşu engelle
        }
        // Eğer nokta veya virgül varsa ve tekrar nokta veya virgül girilmeye çalışılıyorsa engelle
        if ((c == '.' || c == ',') && (maliyetTF.getText().contains(".") || maliyetTF.getText().contains(","))) {
            evt.consume();
        }
    }

    private void rakamYaz(java.awt.event.KeyEvent evt){
        char c = evt.getKeyChar();
        // Eğer basılan tuş rakam değilse, olay engellenir
        if (!Character.isDigit(c)) {
            evt.consume();  // Bu tuşu engelle
        }
    }

    private void formTemizle() {
        urunAdiTf.setText("");
        barcodTf.setText("");
        satisTf.setText("");
        maliyetTF.setText("");
        stokTf.setText("");
        reorderTf.setText("");
        kategoriCombo.setSelectedIndex(0);
        altKategoriCombo.setSelectedIndex(0);
        renkCombo.setSelectedIndex(0);
        bedenCombo.setSelectedIndex(0);
        markaCombo.setSelectedIndex(0);
        urunAdiTf.requestFocus();
    }
    
    private void comboBoxlariDoldur() {
        try {
            
            
            // Kategorileri doldur
            KategoriDAO kategoriDAO = new KategoriDAO();
            List<String> kategoriler = kategoriDAO.tumKategorileriGetir();
            
            kategoriCombo.removeAllItems();
            kategoriCombo.addItem("Seçiniz");
            for(String kategori : kategoriler) {
                kategoriCombo.addItem(kategori);
            }
            
            // Renk ComboBox'ını sadece "Standart" seçeneğiyle doldur
            renkCombo.removeAllItems();
            renkCombo.addItem("Standart");
            
            altKategoriCombo.removeAllItems();
            altKategoriCombo.addItem("Seçiniz");
            
            // Marka ComboBox'ını başlangıçta boş bırak
            markaCombo.removeAllItems();
            markaCombo.addItem("Seçiniz");
            
            // Beden ComboBox'ını sadece "Standart" seçeneğiyle doldur
            bedenCombo.removeAllItems();
            bedenCombo.addItem("Standart");
            
        } catch (Exception e) {
            System.out.println("Hata: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, 
                "ComboBox'lar doldurulurken hata oluştu: " + e.getMessage(),
                "Hata",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> altKategoriCombo;
    private javax.swing.JTextField barcodTf;
    private javax.swing.JComboBox<String> bedenCombo;
    private javax.swing.JButton btnEkle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> kategoriCombo;
    private javax.swing.JTextField maliyetTF;
    private javax.swing.JComboBox<String> markaCombo;
    private javax.swing.JComboBox<String> renkCombo;
    private javax.swing.JTextField reorderTf;
    private javax.swing.JTextField satisTf;
    private javax.swing.JTextField stokTf;
    private javax.swing.JTextField urunAdiTf;
    // End of variables declaration//GEN-END:variables
}
